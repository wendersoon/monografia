# -*- coding: utf-8 -*-
"""AED.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GEyhdfhJb44CCnf3bTQ_oZXJ2FLRZwza
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""#0 - Importação dos dados"""

#Importação dos arquivos calassificados

df = pd.read_csv('/content/avaliacoes.csv')

#visualização das 10 primeiras linhas
df.head(10)

#Visualização das 10 últimas linhas

df.tail(10)

#Tamanho do conjunto de dados

linhas, colunas = df.shape
print(f'Quantidade de linhas: {linhas}')
print(f'Quantidade de colunas: {colunas}')

#Exibir quais colunas existem

df.columns

#Exibir tipo de dados em cada coluna

df.dtypes

# Encontrar linhas duplicadas considerando 'User' e 'Text'
duplicated_rows = df[df.duplicated(subset=['User', 'Text'], keep='first')]

# Exibir as linhas duplicadas
print(duplicated_rows)

"""#1 - Análise Exploratória de Dados (AED)"""

# Quantidade de avaliações por emoção atribuída por cada avaliador

avaliadores = df['User'].unique()

emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']

emotion_counts_by_avaliador = pd.DataFrame(index=emotions, columns=avaliadores)

for avaliador in avaliadores:
    filtered_data = df[df['User'] == avaliador]
    emotion_counts_by_avaliador[avaliador] = filtered_data[emotions].sum()

bar_width = 0.35
index = np.arange(len(emotions))

fig, ax = plt.subplots(figsize=(12, 8))

bars1 = ax.bar(index, emotion_counts_by_avaliador[avaliadores[0]], bar_width, label='Avaliador 1', color='#069AF3')
bars2 = ax.bar(index + bar_width, emotion_counts_by_avaliador[avaliadores[1]], bar_width, label='Avaliador 2', color='lime')

for bars in [bars1, bars2]:
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), ha='center', va='bottom', fontsize=12)

ax.set_xlabel('EMOÇÃO', fontsize=13, fontweight='bold')
ax.set_ylabel('QUANTIDADE DE AVALIAÇÕES', fontsize=13, fontweight='bold')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(emotions)
ax.legend(title="", loc='upper left', frameon=False, fontsize=14)


ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
plt.yticks([])

ax.tick_params(axis='x', labelsize=12)

plt.show()

# Quantidade de dificuldade relatada por cada avaliador para cada frase


avaliadores = df['User'].unique()
emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']
avaliadores

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']
iguais = {emotion: 0 for emotion in emotions}

for i in df_avaliador1['Text']:
    row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
    row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

    result = (row1[emotions] == row2[emotions]).all().all()
    if result:
      if row1['Alegria'].values and row2['Alegria'].values:
        iguais['Alegria'] += 1
      elif row1['Raiva'].values and row2['Raiva'].values:
        iguais['Raiva'] += 1
      elif row1['Tristeza'].values and row2['Tristeza'].values:
        iguais['Tristeza'] += 1
      elif row1['Medo'].values and row2['Medo'].values:
        iguais['Medo'] += 1
      elif row1['Nojo'].values and row2['Nojo'].values:
        iguais['Nojo'] += 1
      elif row1['Surpresa'].values and row2['Surpresa'].values:
        iguais['Surpresa'] += 1
      elif row1['Neutro'].values and row2['Neutro'].values:
        iguais['Neutro'] += 1

emotions = list(iguais.keys())
counts = list(iguais.values())

plt.figure(figsize=(12, 8))
plt.bar(emotions, counts, color='#069AF3')

plt.xlabel('EMOÇÃO', fontsize=13, fontweight='bold')
plt.ylabel('QUANTIDADE DE AVALIAÇÕES', fontsize=13, fontweight='bold')

plt.subplots_adjust(bottom=0.25)

for i, count in enumerate(counts):
    plt.text(i, count + 5, str(count), ha='center', va='bottom', fontsize=12)

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
plt.gca().spines['left'].set_visible(False)

plt.yticks([])
plt.xticks(fontsize=13)

plt.show()

# Concordância simples em porcentagem

avaliadores = df['User'].unique()
emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']
avaliadores

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']

quant = 0
for i in df_avaliador1['Text']:
  row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
  row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

  result = (row1[emotions] == row2[emotions]).all().all()
  if result:
    quant += 1


total_avaliacoes = len(df_avaliador1)
concordantes = quant
discordantes = total_avaliacoes - concordantes
# Labels
labels = ['CONCORDANTES', 'DISCORDANTES']
sizes = [concordantes, discordantes]
colors = ['#069AF3', '#E50000']  # Azul para concordantes e vermelho para discordantes
explode = (0.1, 0)  # explode 1st slice (Concordantes)

fig1, ax1 = plt.subplots(figsize=(12, 8), dpi=85)

def make_autopct(sizes):
    def my_autopct(pct):
        total = sum(sizes)
        val = int(round(pct*total/100.0))
        return f'{pct:.1f}%\n({val:d})'
    return my_autopct

wedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,
                                   autopct=make_autopct(sizes), shadow=True, startangle=140,
                                   wedgeprops={'edgecolor': 'black'},
                                   textprops={'fontsize': 20, 'fontweight': 'bold'})

# Equal aspect ratio ensures that pie is drawn as a circle.
ax1.axis('equal')

# Ajusta a fonte das porcentagens para negrito
for autotext in autotexts:
    autotext.set_fontsize(20)
    autotext.set_fontweight('bold')

plt.title('', fontsize=16, fontweight='bold')

# Mostrar o gráfico
plt.show()

# Quantidade de avaliações por emoção atribuída por cada avaliador

avaliadores = df['User'].unique()

dificuldade = ['Foi Dificil', 'Facil', 'Nenhum nem Outro']

emotion_counts_by_avaliador = pd.DataFrame(index=dificuldade, columns=avaliadores)

for avaliador in avaliadores:
    filtered_data = df[df['User'] == avaliador]
    emotion_counts_by_avaliador[avaliador] = filtered_data[dificuldade].sum()

bar_width = 0.35
index = np.arange(len(dificuldade))

fig, ax = plt.subplots(figsize=(8, 4))

bars1 = ax.bar(index, emotion_counts_by_avaliador[avaliadores[0]], bar_width, label='Avaliador 1', color='#069AF3')
bars2 = ax.bar(index + bar_width, emotion_counts_by_avaliador[avaliadores[1]], bar_width, label='Avaliador 2', color='lime')

for bars in [bars1, bars2]:
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), ha='center', va='bottom', fontsize=12)

ax.set_xlabel('DIFICULDADE', fontsize=13, fontweight='bold')
ax.set_ylabel('QUANTIDADE DE AVALIAÇÕES', fontsize=13, fontweight='bold')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(dificuldade)
ax.set_xticklabels(['FOI DIFÍCIL', 'FÁCIL', 'MAIS OU MENOS'])
ax.legend(title="", loc='upper left', frameon=False, fontsize=14)


ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
plt.yticks([])

ax.tick_params(axis='x', labelsize=12)

plt.show()

#Quantidade de avaliações concordantes entre os avaliadores para cada emoção

avaliadores = df['User'].unique()
dificuldade = ['Foi Dificil', 'Facil', 'Nenhum nem Outro']
avaliadores

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']
iguais = {emotion: 0 for emotion in dificuldade}

for i in df_avaliador1['Text']:
    row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
    row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

    result = (row1[dificuldade] == row2[dificuldade]).all().all()
    if result:
      if row1['Foi Dificil'].values and row2['Foi Dificil'].values:
        iguais['Foi Dificil'] += 1
      elif row1['Facil'].values and row2['Facil'].values:
        iguais['Facil'] += 1
      elif row1['Nenhum nem Outro'].values and row2['Nenhum nem Outro'].values:
        iguais['Nenhum nem Outro'] += 1


DIFICULDADE = list(iguais.keys())
counts = list(iguais.values())

plt.figure(figsize=(12, 8))
plt.bar(DIFICULDADE, counts, color='#069AF3')

plt.xlabel('DIFICULDADE', fontsize=15, fontweight='bold')
plt.ylabel('QUANTIDADE DE AVALIAÇÕES', fontsize=15, fontweight='bold')

plt.xticks(range(len(DIFICULDADE)), ['FOI DIFÍCIL', 'FÁCIL', 'MAIS OU MENOS'], fontsize=15)  # Define os rótulos corrigidos
plt.yticks(fontsize=13)

plt.subplots_adjust(bottom=0.25)

for i, count in enumerate(counts):
    plt.text(i, count + 5, str(count), ha='center', va='bottom', fontsize=15)

plt.gca().spines['left'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

plt.yticks([])
plt.xticks(fontsize=15)

plt.savefig('grafico_qualidade_alta.png', dpi=300, bbox_inches='tight')

plt.show()

# Concordância simples em porcentagem

avaliadores = df['User'].unique()
dificuldade = ['Foi Dificil', 'Facil', 'Nenhum nem Outro']
avaliadores

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']

quant = 0
for i in df_avaliador1['Text']:
  row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
  row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

  result = (row1[dificuldade] == row2[dificuldade]).all().all()
  if result:
    quant += 1


total_avaliacoes = len(df_avaliador1)
concordantes = quant
discordantes = total_avaliacoes - concordantes
# Labels
labels = ['CONCORDANTES', 'DISCORDANTES']
sizes = [concordantes, discordantes]
colors = ['#069AF3', '#E50000']  # Azul para concordantes e vermelho para discordantes
explode = (0.1, 0)  # explode 1st slice (Concordantes)

fig1, ax1 = plt.subplots(figsize=(12, 8), dpi=85)

def make_autopct(sizes):
    def my_autopct(pct):
        total = sum(sizes)
        val = int(round(pct*total/100.0))
        return f'{pct:.1f}%\n({val:d})'
    return my_autopct

wedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,
                                   autopct=make_autopct(sizes), shadow=True, startangle=140,
                                   wedgeprops={'edgecolor': 'black'},
                                   textprops={'fontsize': 20, 'fontweight': 'bold'})

# Equal aspect ratio ensures that pie is drawn as a circle.
ax1.axis('equal')

# Ajusta a fonte das porcentagens para negrito
for autotext in autotexts:
    autotext.set_fontsize(20)
    autotext.set_fontweight('bold')

plt.title('', fontsize=20, fontweight='bold')

# Mostrar o gráfico
plt.show()

# Concordância simples em porcentagem

avaliadores = df['User'].unique()
dificuldade = ['Foi Dificil', 'Facil', 'Nenhum nem Outro']
avaliadores

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']

quant = 0
for i in df_avaliador1['Text']:
  row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
  row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

  result = (row1[dificuldade] == row2[dificuldade]).all().all()
  if result:
    quant += 1


total_avaliacoes = len(df_avaliador1)
concordantes = quant
discordantes = total_avaliacoes - concordantes
# Labels
labels = ['CONCORDANTES', 'DISCORDANTES']
sizes = [concordantes, discordantes]
colors = ['#069AF3', '#E50000']  # Azul para concordantes e vermelho para discordantes
explode = (0.1, 0)  # explode 1st slice (Concordantes)

fig1, ax1 = plt.subplots(figsize=(12, 8), dpi=85)

def make_autopct(sizes):
    def my_autopct(pct):
        total = sum(sizes)
        val = int(round(pct*total/100.0))
        return f'{pct:.1f}%\n({val:d})'
    return my_autopct

wedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,
                                   autopct=make_autopct(sizes), shadow=True, startangle=140,
                                   wedgeprops={'edgecolor': 'black'},
                                   textprops={'fontsize': 20, 'fontweight': 'bold'})

# Equal aspect ratio ensures that pie is drawn as a circle.
ax1.axis('equal')

# Ajusta a fonte das porcentagens para negrito
for autotext in autotexts:
    autotext.set_fontsize(20)
    autotext.set_fontweight('bold')

plt.title('', fontsize=20, fontweight='bold')

# Mostrar o gráfico
plt.show()

#  Quantidade total de avaliações com 100% de concordância em todas as classes


avaliadores = df['User'].unique()
emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']
classes = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro', 'Foi Dificil', 'Facil', 'Nenhum nem Outro']

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']
iguais = {emotion: 0 for emotion in emotions}

for i in df_avaliador1['Text']:
    row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
    row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

    result = (row1[classes] == row2[classes]).all().all()
    if result:
      if row1['Alegria'].values and row2['Alegria'].values:
        iguais['Alegria'] += 1
      elif row1['Raiva'].values and row2['Raiva'].values:
        iguais['Raiva'] += 1
      elif row1['Tristeza'].values and row2['Tristeza'].values:
        iguais['Tristeza'] += 1
      elif row1['Medo'].values and row2['Medo'].values:
        iguais['Medo'] += 1
      elif row1['Nojo'].values and row2['Nojo'].values:
        iguais['Nojo'] += 1
      elif row1['Surpresa'].values and row2['Surpresa'].values:
        iguais['Surpresa'] += 1
      elif row1['Neutro'].values and row2['Neutro'].values:
        iguais['Neutro'] += 1

emotions = list(iguais.keys())
counts = list(iguais.values())

plt.figure(figsize=(12, 8))
plt.bar(emotions, counts, color='#069AF3')

plt.xlabel('EMOÇÃO', fontsize=13, fontweight='bold')
plt.ylabel('QUANTIDADE DE AVALIAÇÕES', fontsize=15, fontweight='bold')

plt.subplots_adjust(bottom=0.25)

for i, count in enumerate(counts):
    plt.text(i, count + 5, str(count), ha='center', va='bottom', fontsize=15)


plt.gca().spines['left'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)

plt.yticks([])
plt.xticks(fontsize=15)

plt.show()

#Quantidade de classes que os avaliadores concordaram
avaliadores = df['User'].unique()
emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']
iguais = {emotion: 0 for emotion in emotions}

for i in df_avaliador1['Text']:
    row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
    row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)

    result = (row1[emotions] == row2[emotions]).all().all()
    if result:
      if row1['Alegria'].values and row2['Alegria'].values:
        iguais['Alegria'] += 1
      elif row1['Raiva'].values and row2['Raiva'].values:
        iguais['Raiva'] += 1
      elif row1['Tristeza'].values and row2['Tristeza'].values:
        iguais['Tristeza'] += 1
      elif row1['Medo'].values and row2['Medo'].values:
        iguais['Medo'] += 1
      elif row1['Nojo'].values and row2['Nojo'].values:
        iguais['Nojo'] += 1
      elif row1['Surpresa'].values and row2['Surpresa'].values:
        iguais['Surpresa'] += 1
      elif row1['Neutro'].values and row2['Neutro'].values:
        iguais['Neutro'] += 1

print(iguais)

#Quantidade de classes que os avaliadores concordaram
avaliadores = df['User'].unique()
emotions = ['Alegria', 'Raiva', 'Tristeza', 'Medo', 'Nojo', 'Surpresa', 'Neutro']

df_avaliador1 = df[df['User'] == 'avaliador_1']
df_avaliador2 = df[df['User'] == 'avaliador_2']
quant_classes = ['a', 'b', 'c', 'd', 'e', 'f', 'g']

iguais = {cla: 0 for cla in quant_classes}

for i in df_avaliador1['Text']:
    row1 = df_avaliador1.loc[df_avaliador1['Text'] == i].reset_index(drop=True)
    row2 = df_avaliador2.loc[df_avaliador2['Text'] == i].reset_index(drop=True)
    #Basta mudar as emoções na row1 para obter os diferentes valores
    if row1['Neutro'].values and row2['Alegria'].values:
      iguais['a'] += 1
    elif row1['Neutro'].values and row2['Raiva'].values:
      iguais['b'] += 1
    elif row1['Neutro'].values and row2['Tristeza'].values:
      iguais['c'] += 1
    elif row1['Neutro'].values and row2['Medo'].values:
      iguais['d'] += 1
    elif row1['Neutro'].values and row2['Nojo'].values:
      iguais['e'] += 1
    elif row1['Neutro'].values and row2['Surpresa'].values:
      iguais['f'] += 1
    elif row1['Neutro'].values and row2['Neutro'].values:
      iguais['g'] += 1

print(iguais)
